# 最长有效括号
"""
    给你一个只包含 '(' 和 ')' 的字符串，找出最长有效（格式正确且连续）括号子串的长度。
"""
"""
    这到题的解题思路就在于你能不能想的到把索引保存 用符合条件的")"这个括号索引减去不符合条件的索引
    其实这个题最难的地方怎么写判断条件和特殊地方的处理 懂吗?
    确实难
"""


class Solution:
    def longestValidParentheses(self, s: str) -> int:
        res = 0
        stack = [-1]   # 为什么等于-1而不是0呢 因为要注意上来就是成对括号 不写-1怎么办了 要是上来不是成对括号的话 不写也是没事的
        for i, c in enumerate(s):
            if c == "(":  # 如果是左括号入栈  记住我们保存的都是索引的值 也就是说到时候可以直接i-索引就可以了呗
                stack.append(i)
            elif len(stack) == 1:
                # 因为一开始stack长度就是1 其实走到这个判断的话说明进来的是")" 那么直接出来就可以 把右括号保存就可以了啊
                # 如果这个地方不做这个判断 无法处理的 因为会走到else那直接出来又有什么意思呢?
                stack.pop()
                stack.append(i)
            else:
                stack.pop()
                # 出栈之后 stack[-1] 其实就是左边不符合匹配的位置 能懂把  ')'()() '('()()
                res = max(res, i - stack[-1])
        return res

"""
    题目是说最长有效括号 并不是说里面有效括号是多少 
        假如a = ")()())"是4 a = ")())())"就是2了 麻烦看清楚一下题目好吗谢谢
    其实看清楚题目之后 这道题一下就没那么难的 归其一点就是说"()"能连续出现多少对
    总结一下走法
        假如先进去是“)” 那么是不是保存的是他的索引(0)啊 然后继续成对括号出现两对那么 走到最后其实就是索引为4的减去索引为0的啊
        那么要是(((()())))这个的话 是不是就会一直添加啊 添加到")"的时候是不是会出来一个 然后stack中不就是(((最后一个"("的索引呗 减一下不就出来呗
        就这了 走通这个就理解了
"""
a = ")()())"
s = Solution()
print(s.longestValidParentheses(a))
