# 接雨水
"""
给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。
"""
"""
    第一种写法 在于你能不能想到 对于一个元素 就是 最大高度3+前面最大的2-实际为1-3=多的1 就这了
        看注释
"""


class Solution:
    def trap(self, height) -> int:
        ans = 0
        h1 = 0
        h2 = 0
        for i in range(len(height)):
            h1 = max(h1, height[i])  # 其实这个地方 是不是一直拿到height里面最大的值啊
            h2 = max(h2, height[-i - 1])  # 和上面一样啊
            ans = ans + h1 + h2 - height[i]
        return ans - len(height) * h1


"""
    你就想加入的是第三个0 左右遍历这个地方 最后加入的会是 4啊 左到右为1 右到左是3 一起不就是4 而4-3 不就是多的1吗 
    或者说 你想啊  或者h1 + h2 - height[i] 这个地方 h1加上h2 如果height[i]为正常的高度(没有被max的值)是不是就到时候 h1+h2-height[i]-3=0
    看倒数第四个到第二个 3+2-2-3=0 3+2-1-3=1 3+2-2-3=0 是不是就是多的 
    抽象来说 对于一个元素 就是 最大高度3+前面最大的2-实际为1-3=多的1 就这了
    0 1 1 2 2 2 2 3 3 3 3 3 左到右
    3 3 3 3 3 3 3 3 2 2 2 1 右到左
    3 4 4 5 5 5 5 6 5 5 5 4 相加
    3 3 4 3 4 5 4 3 3 4 3 3 减去原来的 
    再全部-3就可以了 是多的
    确实不好理解 但是 可以看到另外一种思维 也是不错的呢  这当然不是常规解法 不过也没有常规解法
"""

height = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]
# 输出：6
a = Solution()
print(a.trap(height))
