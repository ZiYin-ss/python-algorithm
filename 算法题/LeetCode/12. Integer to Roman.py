# 整数转罗马数字
"""
罗马数字包含以下七种字符：I，V，X，L，C，D和M。
字符          数值
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
例如，罗马数字2写做II，即为两个并列的1。12 写做XII，即为X+II。 27 写做XXVII, 即为XX+V+II。
通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做IIII，而是IV。
数字1在数字5的左边，所表示的数等于大数5减小数1 得到的数值4 。同样地，数字9表示为IX。这个特殊的规则只适用于以下六种情况：
    I可以放在V(5) 和X(10) 的左边，来表示 4 和 9。
    X可以放在L(50) 和C(100) 的左边，来表示 40 和90。
    C可以放在D(500) 和M(1000) 的左边，来表示400 和900。
    给你一个整数，将其转为罗马数字。
"""
"""
    如果你不想用简便的方法的话 有很多种方法实现 但是不还是想用简单的呗
    这个解题思路在于 
        你能不能想到 
        假如2000 对应两个1000对应两个M 减掉1000加一个M 以此类推啊  
"""


class Solution:
    def intToRoman(self, num: int) -> str:
        values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
        numerals = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']
        result = ''
        for i in range(0,len(values)):
            while num >= values[i]:      #
                num -= values[i]         #
                result += numerals[i]    #
        return result   # 除了能说别人牛逼 我还能说什么呢

"""
    这个思路确实牛逼 
    我不知道怎么说 你走一遍你就知道了 
    1998 先是 大于1000 减一下 加一个M
    999此时用第二个匹配  大于900  减去这个加上对应的numerals[i] 
    99>90  减去90 加上对应的numerals[i](XC) 
    9 减去9  加上numerals[i](IX)
    假如要是8的话 那么走到9的时候 就会跳过的 然后减去对应的5那个数 
    其实这个思路确实牛逼 
"""

a = Solution()
print(a.intToRoman(3999))
