# 字符串转换整数 (atoi)
"""
请你来实现一个myAtoi(string s)函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。
函数myAtoi(string s) 的算法如下：
    读入字符串并丢弃无用的前导空格
    检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。
    读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。
    将前面步骤读入的这些数字转换为整数（即，"123" -> 123， "0032" -> 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。
    如果整数数超过 32 位有符号整数范围 [−231, 231− 1] ，需要截断这个整数，使其保持在这个范围内。
    具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231− 1 的整数应该被固定为 231− 1 。
    返回整数作为最终结果。

注意：
本题中的空白字符只包括空格字符 ' ' 。
除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。
"""
import re

"""
    这道题最难的地方在于你能不能想到用正则 对正则判断开头是不是字母 然后用search匹配符合规则的(从前面开始的数字字符串)
"""


class Solution:
    def myAtoi(self, s: str) -> int:
        stripS = s.strip()
        if stripS == "" or stripS == "-" or stripS == "+":  # 如果单独等于这些符号是不是就是不行的啊 其他的情况下面判断
            return 0
        s1 = re.match("[^\d]+", (stripS.lstrip("-")).lstrip("+"))  # 这个地方是去掉前面的正负号之后 发现匹配到了非数值

        if s1 is not None:  # s1匹配到是不是直接返回0了
            return 0
        else:  # 这个时候 search是不是就是不是本来就会匹配到开头 group是不是就是返回匹配的结果啊
            s1 = re.search('\-*\+*\d+', stripS).group()
            print(s1)

        if s1[0:2] == "--" or s1[0:2] == "-+" or s1[0:2] == "++":  # 多个加加减减其实和两个是一样的
            return 0

        result = int(s1)  # "-13" int之后是-13 注意
        if result > 0:
            return 2147483647 if result > 2147483647 else result
        else:
            return -2147483648 if result < -2147483648 else result

    """
        主要是匹配太多了 其他的还好
    """


a = Solution()
print(a.myAtoi('a13549867'))
