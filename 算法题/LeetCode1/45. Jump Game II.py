# 跳跃游戏2
"""
给你一个非负整数数组nums ，你最初位于数组的第一个位置。
数组中的每个元素代表你在该位置可以跳跃的最大长度。
你的目标是使用最少的跳跃次数到达数组的最后一个位置。
假设你总是可以到达数组的最后一个位置。
"""
"""
    解题思路在于你能不能想的到 当第一步走了之后 依然for循环走  然后记录最大的 位置 
    其实有难度 自己多想想把
"""


class Solution:
    def jump(self, nums) -> int:
        n = len(nums)
        if n == 1:
            return 0
        pre_end = 0  # 上次跳跃能到达的最远距离
        max_cover = 0  # 当前能到达的最远距离
        step = 0
        for i in range(n):
            max_cover = max(max_cover, nums[i] + i)  # 更新i位置能到达的最远位置
            if max_cover >= n - 1:  # 从i位置再跳一次就能到达终点
                return step + 1
            if i == pre_end:  # 已经到达上次跳跃能到的最远距离
                # 此时 max_cover 是上次跳跃能到达所有位置中 再次起跳能到达的最远位置
                # 从这个新位置起跳
                # [2,3,1,1,4]
                # 从index=0出发，最多跳到index=2
                # 可以看到 从index=1 再次起跳 能覆盖的范围最广，所以我们再从index=1跳跃
                step += 1  # 当在于跳到最远位置 不就加一呗
                pre_end = max_cover


"""
    原理就是 在跳到最远位置 不就加一呗 如果没有跳到 继续里面for循环的话 那么找到了 if max_cover >= n - 1 这个条件加一不就可以呗
    还有就是 中间肯定会可能更新最大的 max_cover 其实也没有关系的 因为找到了之后 继续在最后一个if里面更新就是的啦 
    说的很晦涩 但是你走一遍就知道了
"""
